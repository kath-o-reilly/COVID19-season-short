) -> seir
set.seed(42)
seir_sim <- simulate(seir)
seir_full <- as(seir_sim,"data.frame")
head(seir_full)
seir_full_long <- melt(as.data.frame(seir_full)[,1:7],"time")
head(seir_full_long)
# full set
ggplot(seir_full_long,aes(x=time,y=value,colour=variable,group=variable))+
# Add line
geom_step(lwd=2)+
#Add labels
xlab("Time")+ylab("Numbers")+
theme(legend.position="left")
parameters <- c(bet=0.4, gamm=1/3,sigm=1/5, iota=0.01, N=pop,rho=0.8*0.8,amp=0.3,alph=0.0000005)
R0 <- as.numeric((parameters["bet"]*parameters["sigm"])/(parameters["gamm"]*parameters["sigm"]))
pomp(
data=data.frame(time=tsteps,Z=rep(0,length(tsteps))),
times="time",
t0=0,
rinit=function(params, t0, ...) {
x0 <- c(S=pop-1,E=0,I=1,R=0,Y=0,B=0)
x0
},
rmeasure=function (Y, rho, ...) {
c(Z=rbinom(n=1,size=Y,prob=rho))
},
rprocess=euler(
step.fun=seir.step,
delta.t=deltat
),
statenames=c("S","E","I","R","Y","B"),
paramnames=c(
"bet","gamm","sigm","iota", "N","rho","amp","alph"
),
params=parameters
) -> seir
set.seed(42)
seir_sim <- simulate(seir)
seir_full <- as(seir_sim,"data.frame")
head(seir_full)
seir_full_long <- melt(as.data.frame(seir_full)[,1:7],"time")
head(seir_full_long)
# full set
ggplot(seir_full_long,aes(x=time,y=value,colour=variable,group=variable))+
# Add line
geom_step(lwd=2)+
#Add labels
xlab("Time")+ylab("Numbers")+
theme(legend.position="left")
View(seir_full_long)
subset(seir_full_long,variable=="Z")
# just cases
ggplot(subset(seir_full_long,variable=="Z"),aes(x=time,y=value,colour=variable,group=variable))+
# Add line
geom_step(lwd=2)+
#Add labels
xlab("Time")+ylab("Numbers")+
theme(legend.position="left")
# case series
Zout <- seir_full$Z[2:length(seir_full$Z)] - seir_full$Z[1:(length(seir_full$Z)-1)]
plot(Zout)
table(Zout)
seir.step <- Csnippet("
double bett;
// seasonality = beta*(1+0.8*(cos(2*pi*(t/365)))) - is t in here automatically?
bett = bet*(1+0.8*(cos(2*3.141593*(t/365)))) ;
// need to add importations
double lambd = bett * (I+iota) / N;
double ifrac = 1.0 - exp(-lambd *dt);
double rfrac = 1.0 - exp(-gamm*dt);
double ofrac = 1.0 - exp(-sigm*dt);
double mfrac = 1.0 - exp(-alph*dt);
double infection = rbinom(S, ifrac);
double onset = rbinom(E,ofrac);
double recovery = rbinom(I, rfrac);
double import = rbinom(S,mfrac);   // importations (constant in time)
S += -infection -import;
E += infection +import - onset;
I += onset - recovery;
R += recovery;
Y = infection; // +=
B += bett;
")
deltat <- 1  # should be 0.1?
tsteps <- seq(0,365*2,by=deltat)
pop <- 5E+06  # ie. 100,000
parameters <- c(bet=0.4, gamm=1/3,sigm=1/5, iota=0.01, N=pop,rho=0.8*0.8,amp=0.3,alph=0.0000005)
R0 <- as.numeric((parameters["bet"]*parameters["sigm"])/(parameters["gamm"]*parameters["sigm"]))
pomp(
data=data.frame(time=tsteps,Z=rep(0,length(tsteps))),
times="time",
t0=0,
rinit=function(params, t0, ...) {
x0 <- c(S=pop-1,E=0,I=1,R=0,Y=0,B=0)
x0
},
rmeasure=function (Y, rho, ...) {
c(Z=rbinom(n=1,size=Y,prob=rho))
},
rprocess=euler(
step.fun=seir.step,
delta.t=deltat
),
statenames=c("S","E","I","R","Y","B"),
paramnames=c(
"bet","gamm","sigm","iota", "N","rho","amp","alph"
),
params=parameters
) -> seir
seir_sim <- simulate(seir)
seir_full <- as(seir_sim,"data.frame")
head(seir_full)
seir_full_long <- melt(as.data.frame(seir_full)[,1:7],"time")
head(seir_full_long)
# full set
ggplot(seir_full_long,aes(x=time,y=value,colour=variable,group=variable))+
# Add line
geom_step(lwd=2)+
#Add labels
xlab("Time")+ylab("Numbers")+
theme(legend.position="left")
# case series
Zout <- seir_full$Z #seir_full$Z[2:length(seir_full$Z)] - seir_full$Z[1:(length(seir_full$Z)-1)]
plot(Zout)
table(Zout)
beta <- 0.5
t <- 1:365*4
y <- beta*(1+0.8*(cos(2*pi*(t/365))))
plot(t,y)
install.packages("riem")
# extract temp from hokkaido weather station
library(riem)
tmp <- riem_networks()
View(tmp)
tmp <- riem_stations("JP__ASOS")
View(tmp)
# so let's use Sapparo
riem_measures("	RJCO", date_start = "2019-01-01")
# so let's use Sapparo
tmp <- riem_measures("RJCO", date_start = "2019-01-01")
View(tmp)
as.Date(tmp$valid[1:10],"%Y-%d-%m")
tmp$date <- as.Date(tmp$valid,"%Y-%d-%m")
tmp$date2 <- difftime(tmp$date,as.Date("2019-01-01","%Y-%d-%m"),units = days)
?difftime
tmp$date2 <- difftime(tmp$date,as.Date("2019-01-01","%Y-%d-%m"),units = c("days"))
tmp$date2
# convert to daily measure (tmpf is in fareinheit)
temp_avg <- aggregate(tmp$tmpf,by=list(day=date2),mean)
# convert to daily measure (tmpf is in fareinheit)
temp_avg <- aggregate(tmp$tmpf,by=list(day=tmp$date2),mean)
plot(temp_avg)
temp_vals <- rep(temp_avg,4)
plot(temp_vals,y)
temp_vals <- rep(temp_avg[1:365],4)
temp_vals <- rep(temp_avg$x[1:365],4)
plot(temp_vals,y)
t <- 1:365*4
y <- beta*(1+0.8*(cos(2*pi*(t/365))))
plot(t,y)
365*4
y <- beta*(1+0.8*(cos(2*pi*(t/365))))
t <- 1:365*4
t <- c(1:(365*4))
y <- beta*(1+0.8*(cos(2*pi*(t/365))))
plot(t,y)
plot(temp_vals,y)
plot(t,temp_vals)
points(t,y)
y
plot(t,y)
plot(t,temp_vals)
points(t,y*80,col="blue")
plot(t,temp_vals)
points(t,(-y)*80,col="blue")
points(t,(1/y)*80,col="blue")
plot(t,temp_vals)
points(t,(1/y)*40,col="blue")
plot(t,temp_vals)
points(t,(1/y)*10,col="blue")
plot(t,y)
plot(t,1-y)
points(t,(1-y)*10,col="blue")
plot(t,temp_vals)
points(t,(1-y)*10,col="blue")
plot(t,temp_vals)
points(t,(1-y)*40,col="blue")
plot(t,temp_vals)
points(t,(1-y)*60,col="blue")
plot(t,temp_vals)
points(t,(1-y)*80,col="blue")
?save
save(temp_vals,"Hok_temp_4year.Rdat")
save(temp_vals,file="Hok_temp_4year.Rdat")
setwd("~/Documents/GitHub/COVID19-season-short/Climate")
setwd("~/Documents/GitHub/COVID19-season-short/Data")
require(sp)
require(rgdal)
require(raster)
require(ncdf4)
#To make nicer looking maps
require(maps)
require(mapdata)
require(RColorBrewer)
require(ptinpoly)
require(tmap)
require(sf)
require(ggplot2)
require(ggrepel)
library(grid)
library(cowplot)
library(mgcv)
library(snowfall)
dir <- "~/Documents/GitHub/COVID19-season-short/Shapefiles/Detailed/detailed_2013.shp" #"~/Dropbox/Covid-19-season/Rcode/Admin1(2011)/admin1.shp"
name <- "detailed_2013"
admn0 <- readOGR(dir,name)
shpdat0 <- data.frame(admn0@data)
dim(shpdat0)  # 224 polygons 237 for the detailed one
table(shpdat0$CNTRY_TERR)
# load in temperature files *updated*
tmean <- brick("~/Documents/GitHub/COVID19-season-short/era5_daily_t2m_mean_brick_2019-11-01_2020-03-14.tif")
# load in temperature files *updated*
tmean <- brick("~/Documents/GitHub/COVID19-season-short/Data/era5_daily_t2m_mean_brick_2019-11-01_2020-03-14.tif")
tmp <- tmean[[2]]
names(tmean)
humid <- brick("~/Documents/GitHub/COVID19-season-short/Data/era5_relhum_mean_brick_2019-11-01_2020-03-14.tif")
tmp <- humid[[1]]
names(humid)
dim(humid)
# load in pop raster
# WORLDPOP see https://www.worldpop.org/
str_name<-'~/Documents/WorldPop/ppp_2020_1km_Aggregated.tif'
popdat<-raster(str_name)
dim(popdat)
dates[62]
dates <- seq(as.Date("2019/11/01"), as.Date("2020/03/14"), "days")  # use this sequence
dates[62]
dates[135]
dates <- seq(as.Date("2019/11/01"), as.Date("2020/03/14"), "days")  # use this sequence
names(shpdat0)
shpdat0$temp_mean_14Mar20 <- shpdat0$temp_mean_14Mar20_pa <- 0  # temp on the 14Mar
shpdat0$temp_mean_3mth <- shpdat0$temp_mean_3mth_pa <- 0        # temp Jan-14Mar
shpdat0$humd_mean_14Mar20 <- shpdat0$humd_mean_14Mar20_pa <- 0  # temp on the 14Mar
shpdat0$humd_mean_3mth <- shpdat0$humd_mean_3mth_pa <- 0        # temp Jan-14Mar
dates <- seq(as.Date("2019/11/01"), as.Date("2020/03/14"), "days")  # use this sequence
dates[62]
dates[135]
length(dates[122]:dates[31])
# loop through - this takes a while so next time should really have this in parallel
getRas_funct <- function(i,admn0,tmean,popdat,humid){
tmp_shp <- admn0[i,]   # shp for country i
# 1. raster of 14Mar20
tmean01 <- tmean[[135]]
craster01 <- crop(tmean01,tmp_shp)
popras <- crop(popdat,tmp_shp)
popras2 <- resample(popras,tmean01)  # scale to craster
t1 <- as.vector(unlist(extract(popras2,tmp_shp))) # '1000
t1[is.na(t1)] <- 0  # remove na's
#tmean01
# one temp for 14 March
pop <- t1/sum(t1)
temp <- as.vector(unlist(extract(tmean01,tmp_shp)))
temp_mean_14Mar20 <- mean(temp) #cellStats(craster, stat='mean', na.rm=TRUE, asSample=TRUE)  # not pop adjusted
temp_mean_14Mar20_pa <- sum(pop*temp)
# humidity
hmean01 <- humid[[135]]
hraster01 <- crop(hmean01,tmp_shp)
hvec <- as.vector(unlist(extract(hmean01,tmp_shp)))
hmid_mean_14Mar20 <- mean(hvec) #cellStats(craster, stat='mean', na.rm=TRUE, asSample=TRUE)  # not pop adjusted
hmid_mean_14Mar20_pa <- sum(pop*hvec)
#browser()
# mean temp for Dec-Feb
temp_all <- c()
humd_all <- c()
for(t in 62:135){  # 2020-01-01" to "2020-03-14"
# temp
tmean01 <- tmean[[t]]   # extract the right raster
temp <- as.vector(unlist(extract(tmean01,tmp_shp)))
temp_all <- rbind(temp_all,temp)  # increasing rows
# humidity
hmean01 <- humid[[t]]   # extract the right raster
hvec <- as.vector(unlist(extract(hmean01,tmp_shp)))
humd_all <- rbind(humd_all,hvec)  # increasing rows
}
temp_mean_3mth <- mean(apply(temp_all,2,mean))
temp_mean_3mth_pa <- sum(apply(temp_all,2,mean)*pop)       # temp Dec/Jan/Feb
hmid_mean_3mth <- mean(apply(humd_all,2,mean))
hmid_mean_3mth_pa <- sum(apply(humd_all,2,mean)*pop)       # temp Dec/Jan/Feb
write.csv(paste0(as.character(shpdat0$CNTRY_TERR[i]," ",i," complete")),file=paste0("Checks/check_",i,".csv"))
return(list=c(temp_mean_14Mar20=temp_mean_14Mar20,temp_mean_14Mar20_pa=temp_mean_14Mar20_pa,
hmid_mean_14Mar20=hmid_mean_14Mar20,hmid_mean_14Mar20_pa=hmid_mean_14Mar20_pa,
temp_mean_3mth=temp_mean_3mth,temp_mean_3mth_pa=temp_mean_3mth_pa,
hmid_mean_3mth=hmid_mean_3mth,hmid_mean_3mth_pa=hmid_mean_3mth_pa))
}
cpuStart <- 1
cpuStop <- dim(shpdat0)[1] #total nodes
# considering above we need each node to specify a model
cpus=4
process <- function(parallel = FALSE){
sfInit(parallel = parallel, cpus = cpus)
# bespoke functions need to be exported
# libraries need to be exported
sfLibrary(raster)
#sfLibrary(deSolve)
sfExportAll()
out <- sfLapply( cpuStart:cpuStop, getRas_funct,admn0=admn0,tmean=tmean,popdat=popdat,humid=humid)
sfStop()
return(out)
}
load(file="~/Documents/GitHub/COVID19-season-short/Data/temp_humd_out_detail_Jan-14Mar.Rdat")
# library(data.table)
out <- data.frame(matrix(unlist(outP,use.names = TRUE),nrow=length(outP), byrow=T))
names(out) <- names(outP[[1]])
shpdat0$temp_mean_14Mar20 <- out$temp_mean_14Mar20
shpdat0$temp_mean_14Mar20_pa <- out$temp_mean_14Mar20_pa # temp on the 14Mar
shpdat0$temp_mean_3mth <- out$temp_mean_3mth
shpdat0$temp_mean_3mth_pa <- out$temp_mean_3mth_pa        # temp Dec/Jan/Feb
shpdat0$humd_mean_14Mar20 <- out[,3]
shpdat0$humd_mean_14Mar20_pa <- out[,4]  # temp on the 14Mar
shpdat0$humd_mean_3mth <- out[,7]
shpdat0$humd_mean_3mth_pa <- out[,8]       # temp Dec/Jan/Feb
admn0$temp_mean_14Mar20 <- shpdat0$temp_mean_14Mar20
admn0$temp_mean_14Mar20_pa <- shpdat0$temp_mean_14Mar20_pa # temp on the 14Mar
admn0$temp_mean_3mth <- shpdat0$temp_mean_3mth
admn0$temp_mean_3mth_pa <- shpdat0$temp_mean_3mth_pa        # temp Dec/Jan/Feb
admn0$humd_mean_14Mar20 <- shpdat0$humd_mean_14Mar20
admn0$humd_mean_14Mar20_pa <- shpdat0$humd_mean_14Mar20_pa  # temp on the 14Mar
admn0$humd_mean_3mth <- shpdat0$humd_mean_3mth
admn0$humd_mean_3mth_pa <- shpdat0$humd_mean_3mth
setwd("~/Documents/GitHub/COVID19-season-short/Plots")
# plot these to check
jpeg("world_temp_14MarB.jpeg",height=1000,width=2000)
tm_shape(admn0) + tm_polygons("temp_mean_14Mar20",palette="PRGn") +
tm_layout(legend.position=c("left","bottom"),legend.text.size=2,  # ok this is being recognised
legend.title.size=2.2)
dev.off()
jpeg("world_temp_14Mar_paB.jpeg",height=1000,width=2000)
tm_shape(admn0) + tm_polygons("temp_mean_14Mar20_pa",palette="PRGn") +
tm_layout(legend.position=c("left","bottom"),legend.text.size=2,  # ok this is being recognised
legend.title.size=2.2)
dev.off()
jpeg("world_temp_3mthB.jpeg",height=1000,width=2000)
tm_shape(admn0) + tm_polygons("temp_mean_3mth",palette="PRGn") +
tm_layout(legend.position=c("left","bottom"),legend.text.size=2,  # ok this is being recognised
legend.title.size=2.2)
dev.off()
jpeg("world_temp_3mth_paB.jpeg",height=1000,width=2000)
tm_shape(admn0) + tm_polygons("temp_mean_3mth_pa",palette="PRGn") +
tm_layout(legend.position=c("left","bottom"),legend.text.size=2,  # ok this is being recognised
legend.title.size=2.2)
dev.off()
jpeg("world_humd_14MarB.jpeg",height=1000,width=2000)
tm_shape(admn0) + tm_polygons("humd_mean_14Mar20",palette="PRGn") +
tm_layout(legend.position=c("left","bottom"),legend.text.size=2,  # ok this is being recognised
legend.title.size=2.2)
dev.off()
jpeg("world_humd_14Mar_paB.jpeg",height=1000,width=2000)
tm_shape(admn0) + tm_polygons("humd_mean_14Mar20_pa",palette="PRGn") +
tm_layout(legend.position=c("left","bottom"),legend.text.size=2,  # ok this is being recognised
legend.title.size=2.2)
dev.off()
jpeg("world_humd_3mthB.jpeg",height=1000,width=2000)
tm_shape(admn0) + tm_polygons("humd_mean_3mth",palette="PRGn") +
tm_layout(legend.position=c("left","bottom"),legend.text.size=2,  # ok this is being recognised
legend.title.size=2.2)
dev.off()
jpeg("world_humd_3mth_paB.jpeg",height=1000,width=2000)
tm_shape(admn0) + tm_polygons("humd_mean_3mth_pa",palette="PRGn") +
tm_layout(legend.position=c("left","bottom"),legend.text.size=2,  # ok this is being recognised
legend.title.size=2.2)
dev.off()
sitrep <- read.csv("~/Documents/GitHub/COVID19-season-short/Data/WHO_SITREP_COVID_24032020_v2.csv")
names(sitrep)
shpdat0$cases <-  shpdat0$new_cases <- shpdat0$deaths <- shpdat0$new_deaths <- shpdat0$transmission <- shpdat0$days_since_last_case <- "No data"
oo <- match(as.character(shpdat0$ISO_3_CODE),as.character(sitrep$ISO_3_CODE))
sum(!is.na(oo))
sum(is.na(oo))
shpdat0$cases <- sitrep$Total.confirmed[oo]
shpdat0$new_cases <- sitrep$Total.confirmed.new.cases[oo]
shpdat0$deaths <- sitrep$Total.deaths[oo]
shpdat0$new_deaths <- sitrep$Total.new.deaths[oo]
shpdat0$transmission <- sitrep$Transmission.classification[oo]
shpdat0$days_since_last_case <- sitrep$Days.since.last.reported.case[oo]
# cleaning
# Internationalconveyance(DiamondPrincess)  is always there...
table(sitrep$Total.deaths)
table(shpdat0$deaths) # so that hasn't worked.
table(sitrep$Transmission.classification)
table(shpdat0$transmission)
table(shpdat0$transmission)
shpdat0$transmission <- relevel(shpdat0$transmission,levels(shpdat0$transmission)[2])
levels(shpdat0$transmission)
# into maps
admn0$transmission <- shpdat0$transmission
levels(admn0$transmission) <- c("Imported cases only ","Local transmission ","Under investigation ","No information")
admn0$transmission[is.na(admn0$transmission)] <- "No information"
admn0$deathsGrp <- shpdat0$deathsGrp
table(admn0$transmission)
# choose a colour-scheme - using https://colorbrewer2.org/
myColors <- c("#f1a340","#998ec3","#f5f5f5","grey80")
sc <- 2
jpeg("sitrep_WHOdef_24Mar20v2.jpeg",height=450*sc,width=900*sc)
tm_shape(admn0) + tm_polygons(title="WHO transmission status\n as of 24 Mar 2020","transmission",palette=myColors) +
tm_layout(legend.position=c("left","bottom"),legend.text.size=2,  # ok this is being recognised
legend.title.size=4)
dev.off()
levels(admn0$transmission)
levels(admn0$transmission) <- c("Local transmission ","Imported cases only ","Under investigation ","No information")
admn0$transmission[is.na(admn0$transmission)] <- "No information"
admn0$deathsGrp <- shpdat0$deathsGrp
table(admn0$transmission)
jpeg("sitrep_WHOdef_24Mar20v2.jpeg",height=450*sc,width=900*sc)
tm_shape(admn0) + tm_polygons(title="WHO transmission status\n as of 24 Mar 2020","transmission",palette=myColors) +
tm_layout(legend.position=c("left","bottom"),legend.text.size=2,  # ok this is being recognised
legend.title.size=4)
dev.off()
# choose a colour-scheme - using https://colorbrewer2.org/
myColors <- c("#998ec3","#f1a340","#f5f5f5","grey80")
jpeg("sitrep_WHOdef_24Mar20v2.jpeg",height=450*sc,width=900*sc)
tm_shape(admn0) + tm_polygons(title="WHO transmission status\n as of 24 Mar 2020","transmission",palette=myColors) +
tm_layout(legend.position=c("left","bottom"),legend.text.size=2,  # ok this is being recognised
legend.title.size=4)
dev.off()
head(sitrep)
oo <- match(as.character(sitrep$ISO_3_CODE),as.character(shpdat0$ISO_3_CODE))
sum(is.na(oo))
sitrep$temp_mean_14Mar20 <- shpdat0$temp_mean_14Mar20[oo]
sitrep$temp_mean_14Mar20_pa <- shpdat0$temp_mean_14Mar20_pa[oo] # temp on the 14Mar
sitrep$temp_mean_3mth <- shpdat0$temp_mean_3mth[oo]
sitrep$temp_mean_3mth_pa <- shpdat0$temp_mean_3mth_pa[oo]        # temp Dec/Jan/Feb
sitrep$humd_mean_14Mar20 <- shpdat0$humd_mean_14Mar20[oo]
sitrep$humd_mean_14Mar20_pa <- shpdat0$humd_mean_14Mar20_pa[oo]  # temp on the 14Mar
sitrep$humd_mean_3mth <- shpdat0$humd_mean_3mth[oo]
sitrep$humd_mean_3mth_pa <- shpdat0$humd_mean_3mth[oo]
sitrep[is.na(oo),]
sitreptmp <- sitrep[is.na(sitrep$temp_mean_14Mar20_pa),]
View(sitreptmp)
# make small adjustment for pa being NA (small number of countries)
sitrep$temp_mean_14Mar20_pa[is.na(sitrep$temp_mean_14Mar20_pa)] <- sitrep$temp_mean_14Mar20[is.na(sitrep$temp_mean_14Mar20_pa)]
sitrep$temp_mean_14Mar20_paadj <- sitrep$temp_mean_14Mar20_pa
sitrep$temp_mean_3mth_pa[is.na(sitrep$temp_mean_3mth_pa)] <- sitrep$temp_mean_3mth[is.na(sitrep$temp_mean_3mth_pa)]
sitrep$temp_mean_3mth_paadj <- sitrep$temp_mean_3mth_pa
write.csv(sitrep,file="~/Dropbox/Covid-19-season/Data/WHO_SITREP_COVID_24032020_incTemp_v2.csv")
?write.csv
write.csv(sitrep,file="~/Documents/GitHub/COVID19-season-short/Data/WHO_SITREP_COVID_24032020_incTemp_v2.csv",encoding="UTF-8")
write.csv(sitrep,file="~/Documents/GitHub/COVID19-season-short/Data/WHO_SITREP_COVID_24032020_incTemp_v2.csv",fileEncoding="UTF-8")
# fileEncoding hopefully gets ride of the word gremlins
write.csv(sitrep,file="~/Documents/GitHub/COVID19-season-short/Data/WHO_SITREP_COVID_24032020_incTemp_v2.csv",fileEncoding="UTF-8")
# so let's focus on 'local transmission' and 'importations'
sitrepB <- sitrep[sitrep$Transmission.classification!="Under investigation",]
# sitrepB$labs[sitrepB$Transmission.classification==levels(sitrepB$Transmission.classification)[2] &
#                sitrepB$temp_mean_3mth_pa>25 &
#                sitrepB$humd_mean_3mth_pa>70 &
#                !is.na(sitrepB$temp_mean_3mth_pa) &
#                !is.na(sitrepB$Transmission.classification)] <-
#   as.character(sitrepB$Reporting.Country[sitrepB$Transmission.classification==levels(sitrepB$Transmission.classification)[2] &
#                                            sitrepB$temp_mean_3mth_pa>25 &
#                                            sitrepB$humd_mean_3mth_pa>70 &
#                                            !is.na(sitrepB$temp_mean_3mth_pa) &
#                                            !is.na(sitrepB$Transmission.classification)])
sitrepB$labs[sitrepB$Transmission.classification==levels(sitrepB$Transmission.classification)[2] &
sitrepB$temp_mean_3mth_pa>25 &
sitrepB$humd_mean_3mth_pa>70 &
!is.na(sitrepB$temp_mean_3mth_pa) &
!is.na(sitrepB$Transmission.classification)] <- "                           +"
# make dataframe just for labels
labtrs <- sitrepB[nchar(as.character(sitrepB$labs))>1,]
table(as.character(labtrs$Reporting.Country))
table(labtrs$labs)
jpeg("compare_temp3mth_popad_WHOdef_24Mar20v2c.jpeg",height=400*sc,width=900*sc*0.5)
p1 <- ggplot(sitrepB,aes(x=Transmission.classification,y=temp_mean_3mth_pa,
colours=Transmission.classification)) + #geom_point() +
geom_jitter(aes(colour = factor(Transmission.classification)),shape=16,size=6,
position=position_jitter(0.2),show.legend = FALSE) +
scale_colour_manual(name="test",values = myColors) + #geom_text(data=sitrep,label=labs) +
labs(y="Mean temp (oC pop adj.)",x="WHO definition (as of 24 Mar 2020)",size=6) +
theme_bw(base_size = 40)
p1 + geom_text(data=labtrs,aes(label=labs),#nudge_x = 0.5,#check_overlap = T,#direction="both",
position=position_jitter(width=0.1,height=0),
segment.colour = NA,size=12)
dev.off()
table(sitrepB$Transmission.classification)
table(sitrep$Transmission.classification)
myColors <- c("#f1a340","#998ec3","#f5f5f5","grey80")
jpeg("compare_temp3mth_popad_WHOdef_24Mar20v2c.jpeg",height=400*sc,width=900*sc*0.5)
p1 <- ggplot(sitrepB,aes(x=Transmission.classification,y=temp_mean_3mth_pa,
colours=Transmission.classification)) + #geom_point() +
geom_jitter(aes(colour = factor(Transmission.classification)),shape=16,size=6,
position=position_jitter(0.2),show.legend = FALSE) +
scale_colour_manual(name="test",values = myColors) + #geom_text(data=sitrep,label=labs) +
labs(y="Mean temp (oC pop adj.)",x="WHO definition (as of 24 Mar 2020)",size=6) +
theme_bw(base_size = 40)
p1 + geom_text(data=labtrs,aes(label=labs),#nudge_x = 0.5,#check_overlap = T,#direction="both",
position=position_jitter(width=0.1,height=0),
segment.colour = NA,size=12)
dev.off()
jpeg("compare_humid3mth_popad_WHOdef_24Mar20v2b.jpeg",height=400*sc,width=900*sc*0.5)
p1 <- ggplot(sitrepB,aes(x=Transmission.classification,y=humd_mean_3mth_pa,
colours=Transmission.classification)) + #geom_point() +
geom_jitter(aes(colour = factor(Transmission.classification)),shape=16,size=6,
position=position_jitter(0.2),show.legend = FALSE) +
scale_colour_manual(name="test",values = myColors) + #geom_text(data=sitrep,label=labs) +
labs(y="Mean rel humidity (% pop adj.)",x="WHO definition (as of 24 Mar 2020)",size=6) +
theme_bw(base_size = 40)
p1 + geom_text(data=labtrs,aes(label=labs),#nudge_x = 0.5,#check_overlap = T,#direction="both",
position=position_jitter(width=0.1,height=0),
segment.colour = NA,size=12)
dev.off()
head(sitrepB)
res.aov <- aov(temp_mean_3mth_pa ~ Transmission.classification, data = sitrepB)
summary(res.aov)
